{
  "name": "codepage",
  "version": "1.3.8",
  "author": {
    "name": "SheetJS"
  },
  "description": "pure-JS library to handle codepages",
  "keywords": [
    "codepage",
    "iconv",
    "convert",
    "strings"
  ],
  "bin": {
    "codepage": "./bin/codepage.njs"
  },
  "files": [
    "LICENSE",
    "README.md",
    "bin",
    "cptable.js",
    "cputils.js",
    "dist/cpexcel.full.js"
  ],
  "main": "cputils.js",
  "dependencies": {
    "voc": "",
    "concat-stream": "",
    "commander": ""
  },
  "devDependencies": {
    "mocha": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-codepage.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test",
    "build": "make js"
  },
  "config": {
    "blanket": {
      "pattern": "[cptable.js,cputils.js,cpexcel.js]"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-codepage/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Codepages for JS\n\n[Codepages](https://en.wikipedia.org/wiki/Codepage) are character encodings.  In\nmany contexts, single- or double-byte character sets are used in lieu of Unicode\nencodings.  The codepages map between characters and numbers.\n\n[unicode.org](http://www.unicode.org/Public/MAPPINGS/) hosts lists of mappings.\nThe build script automatically downloads and parses the mappings in order to\ngenerate the full script.  The `pages.csv` description in `codepage.md` controls\nwhich codepages are used.\n\n## Setup\n\nIn node:\n\n    var cptable = require('codepage');\n\nIn the browser:\n\n    <script src=\"cptable.js\"></script>\n    <script src=\"cputils.js\"></script>\n\nAlternatively, use the full version in the dist folder:\n\n    <script src=\"cptable.full.js\"></script>\n\nThe complete set of codepages is large due to some Double Byte Character Set\nencodings.  A much smaller file that just includes SBCS codepages is provided in\nthis repo (`sbcs.js`), as well as a file for other projects (`cpexcel.js`)\n\nIf you know which codepages you need, you can include individual scripts for\neach codepage.  The individual files are provided in the `bits/` directory.\nFor example, to include only the Mac codepages:\n\n    <script src=\"bits/10000.js\"></script>\n    <script src=\"bits/10006.js\"></script>\n    <script src=\"bits/10007.js\"></script>\n    <script src=\"bits/10029.js\"></script>\n    <script src=\"bits/10079.js\"></script>\n    <script src=\"bits/10081.js\"></script>\n\nAll of the browser scripts define and append to the `cptable` object.  To rename\nthe object, edit the `JSVAR` shell variable in `make.sh` and run the script.\n\nThe utilities functions are contained in `cputils.js`, which assumes that the\nappropriate codepage scripts were loaded.\n\n## Usage\n\nThe codepages are indexed by number.  To get the unicode character for a given\ncodepoint, use the `dec` property:\n\n    var unicode_cp10000_255 = cptable[10000].dec[255]; // Àá\n\nTo get the codepoint for a given character, use the `enc` property:\n\n    var cp10000_711 = cptable[10000].enc[String.fromCharCode(711)]; // 255\n\nThere are a few utilities that deal with strings and buffers:\n\n    var Ê±áÊÄª = cptable.utils.decode(936, [0xbb,0xe3,0xd7,0xdc]);\n    var buf =  cptable.utils.encode(936,  Ê±áÊÄª);\n    var sushi= cptable.utils.decode(65001, [0xf0,0x9f,0x8d,0xa3]); // üç£\n    var sbuf = cptable.utils.encode(65001, sushi);\n\n`cptable.utils.encode(CP, data, ofmt)` accepts a String or Array of characters\nand returns a representation controlled by `ofmt`:\n\n- Default output is a Buffer (or Array) of bytes (integers between 0 and 255).\n- If `ofmt == 'str'`, return a String where `o.charCodeAt(i)` is the ith byte\n- If `ofmt == 'arr'`, return an Array of bytes\n\n## Known Excel Codepages\n\nA much smaller script, including only the codepages known to be used in Excel,\nis available under the name `cpexcel`.  It exposes the same variable `cptable`\nand is suitable as a drop-in replacement when the full codepage tables are not\nneeded.\n\nIn node:\n\n    var cptable = require('codepage/dist/cpexcel.full');\n\n## Rolling your own script\n\nThe `make.sh` script in the repo can take a manifest and generate JS source.\n\nUsage:\n\n    bash make.sh path_to_manifest output_file_name JSVAR\n\nwhere\n\n- `JSVAR` is the name of the exported variable (generally `cptable`)\n- `output_file_name` is the output file (e.g. `cpexcel.js`, `cptable.js`)\n- `path_to_manifest` is the path to the manifest file.\n\nThe manifest file is expected to be a CSV with 3 columns:\n\n    <codepage number>,<source>,<size>\n\nIf a source is specified, it will try to download the specified file and parse.\nThe file format is expected to follow the format from the unicode.org site.\nThe size should be `1` for a single-byte codepage and `2` for a double-byte\ncodepage.  For mixed codepages (which use some single- and some double-byte\ncodes), the script assumes the mapping is a prefix code and generates efficient\nJS code.\n\nGenerated scripts only include the mapping.  `cat` a mapping with `cputils.js`\nto produce a complete script like `cpexcel.full.js`.\n\n## Building the complete script\n\nThis script uses [voc](npm.im/voc).  The script to build the codepage tables and\nthe JS source is `codepage.md`, so building is as simple as `voc codepage.md`.\n\n## Generated Codepages\n\nThe complete list of hardcoded codepages can be found in the file `pages.csv`.\n\nSome codepages are easier to implement algorithmically.  Since these are\nhardcoded in utils, there is no corresponding entry (they are \"magic\")\n\n| CP# |  Information  | Description |\n| --: |  :----------: | :---------- |\n|   37|  unicode.org  |IBM EBCDIC US-Canada\n|  437|  unicode.org  |OEM United States\n|  500|  unicode.org  |IBM EBCDIC International\n|  620|      NLS      |Mazovia (Polish) MS-DOS\n|  708|MakeEncoding.cs|Arabic (ASMO 708)\n|  720|MakeEncoding.cs|Arabic (Transparent ASMO); Arabic (DOS)\n|  737|  unicode.org  |OEM Greek (formerly 437G); Greek (DOS)\n|  775|  unicode.org  |OEM Baltic; Baltic (DOS)\n|  850|  unicode.org  |OEM Multilingual Latin 1; Western European (DOS)\n|  852|  unicode.org  |OEM Latin 2; Central European (DOS)\n|  855|  unicode.org  |OEM Cyrillic (primarily Russian)\n|  857|  unicode.org  |OEM Turkish; Turkish (DOS)\n|  858|MakeEncoding.cs|OEM Multilingual Latin 1 + Euro symbol\n|  860|  unicode.org  |OEM Portuguese; Portuguese (DOS)\n|  861|  unicode.org  |OEM Icelandic; Icelandic (DOS)\n|  862|  unicode.org  |OEM Hebrew; Hebrew (DOS)\n|  863|  unicode.org  |OEM French Canadian; French Canadian (DOS)\n|  864|  unicode.org  |OEM Arabic; Arabic (864)\n|  865|  unicode.org  |OEM Nordic; Nordic (DOS)\n|  866|  unicode.org  |OEM Russian; Cyrillic (DOS)\n|  869|  unicode.org  |OEM Modern Greek; Greek, Modern (DOS)\n|  870|MakeEncoding.cs|IBM EBCDIC Multilingual/ROECE (Latin 2)\n|  874|  unicode.org  |Windows Thai\n|  875|  unicode.org  |IBM EBCDIC Greek Modern\n|  895|      NLS      |Kamenick√Ω (Czech) MS-DOS\n|  932|  unicode.org  |Japanese Shift-JIS\n|  936|  unicode.org  |Simplified Chinese GBK\n|  949|  unicode.org  |Korean\n|  950|  unicode.org  |Traditional Chinese Big5\n| 1026|  unicode.org  |IBM EBCDIC Turkish (Latin 5)\n| 1047|MakeEncoding.cs|IBM EBCDIC Latin 1/Open System\n| 1140|MakeEncoding.cs|IBM EBCDIC US-Canada (037 + Euro symbol)\n| 1141|MakeEncoding.cs|IBM EBCDIC Germany (20273 + Euro symbol)\n| 1142|MakeEncoding.cs|IBM EBCDIC Denmark-Norway (20277 + Euro symbol)\n| 1143|MakeEncoding.cs|IBM EBCDIC Finland-Sweden (20278 + Euro symbol)\n| 1144|MakeEncoding.cs|IBM EBCDIC Italy (20280 + Euro symbol)\n| 1145|MakeEncoding.cs|IBM EBCDIC Latin America-Spain (20284 + Euro symbol)\n| 1146|MakeEncoding.cs|IBM EBCDIC United Kingdom (20285 + Euro symbol)\n| 1147|MakeEncoding.cs|IBM EBCDIC France (20297 + Euro symbol)\n| 1148|MakeEncoding.cs|IBM EBCDIC International (500 + Euro symbol)\n| 1149|MakeEncoding.cs|IBM EBCDIC Icelandic (20871 + Euro symbol)\n| 1200|     magic     |Unicode UTF-16, little endian (BMP of ISO 10646)\n| 1201|     magic     |Unicode UTF-16, big endian\n| 1250|  unicode.org  |Windows Central Europe\n| 1251|  unicode.org  |Windows Cyrillic\n| 1252|  unicode.org  |Windows Latin I\n| 1253|  unicode.org  |Windows Greek\n| 1254|  unicode.org  |Windows Turkish\n| 1255|  unicode.org  |Windows Hebrew\n| 1256|  unicode.org  |Windows Arabic\n| 1257|  unicode.org  |Windows Baltic\n| 1258|  unicode.org  |Windows Vietnam\n| 1361|MakeEncoding.cs|Korean (Johab)\n|10000|  unicode.org  |MAC Roman\n|10001|MakeEncoding.cs|Japanese (Mac)\n|10002|MakeEncoding.cs|MAC Traditional Chinese (Big5)\n|10003|MakeEncoding.cs|Korean (Mac)\n|10004|MakeEncoding.cs|Arabic (Mac)\n|10005|MakeEncoding.cs|Hebrew (Mac)\n|10006|  unicode.org  |Greek (Mac)\n|10007|  unicode.org  |Cyrillic (Mac)\n|10008|MakeEncoding.cs|MAC Simplified Chinese (GB 2312)\n|10010|MakeEncoding.cs|Romanian (Mac)\n|10017|MakeEncoding.cs|Ukrainian (Mac)\n|10021|MakeEncoding.cs|Thai (Mac)\n|10029|  unicode.org  |MAC Latin 2 (Central European)\n|10079|  unicode.org  |Icelandic (Mac)\n|10081|  unicode.org  |Turkish (Mac)\n|10082|MakeEncoding.cs|Croatian (Mac)\n|12000|     magic     |Unicode UTF-32, little endian byte order\n|12001|     magic     |Unicode UTF-32, big endian byte order\n|20000|MakeEncoding.cs|CNS Taiwan (Chinese Traditional)\n|20001|MakeEncoding.cs|TCA Taiwan\n|20002|MakeEncoding.cs|Eten Taiwan (Chinese Traditional)\n|20003|MakeEncoding.cs|IBM5550 Taiwan\n|20004|MakeEncoding.cs|TeleText Taiwan\n|20005|MakeEncoding.cs|Wang Taiwan\n|20105|MakeEncoding.cs|Western European IA5 (IRV International Alphabet 5) 7-bit\n|20106|MakeEncoding.cs|IA5 German (7-bit)\n|20107|MakeEncoding.cs|IA5 Swedish (7-bit)\n|20108|MakeEncoding.cs|IA5 Norwegian (7-bit)\n|20127|     magic     |US-ASCII (7-bit)\n|20261|MakeEncoding.cs|T.61\n|20269|MakeEncoding.cs|ISO 6937 Non-Spacing Accent\n|20273|MakeEncoding.cs|IBM EBCDIC Germany\n|20277|MakeEncoding.cs|IBM EBCDIC Denmark-Norway\n|20278|MakeEncoding.cs|IBM EBCDIC Finland-Sweden\n|20280|MakeEncoding.cs|IBM EBCDIC Italy\n|20284|MakeEncoding.cs|IBM EBCDIC Latin America-Spain\n|20285|MakeEncoding.cs|IBM EBCDIC United Kingdom\n|20290|MakeEncoding.cs|IBM EBCDIC Japanese Katakana Extended\n|20297|MakeEncoding.cs|IBM EBCDIC France\n|20420|MakeEncoding.cs|IBM EBCDIC Arabic\n|20423|MakeEncoding.cs|IBM EBCDIC Greek\n|20424|MakeEncoding.cs|IBM EBCDIC Hebrew\n|20833|MakeEncoding.cs|IBM EBCDIC Korean Extended\n|20838|MakeEncoding.cs|IBM EBCDIC Thai\n|20866|MakeEncoding.cs|Russian Cyrillic (KOI8-R)\n|20871|MakeEncoding.cs|IBM EBCDIC Icelandic\n|20880|MakeEncoding.cs|IBM EBCDIC Cyrillic Russian\n|20905|MakeEncoding.cs|IBM EBCDIC Turkish\n|20924|MakeEncoding.cs|IBM EBCDIC Latin 1/Open System (1047 + Euro symbol)\n|20932|MakeEncoding.cs|Japanese (JIS 0208-1990 and 0212-1990)\n|20936|MakeEncoding.cs|Simplified Chinese (GB2312-80)\n|20949|MakeEncoding.cs|Korean Wansung\n|21025|MakeEncoding.cs|IBM EBCDIC Cyrillic Serbian-Bulgarian\n|21027|      NLS      |Extended/Ext Alpha Lowercase\n|21866|MakeEncoding.cs|Ukrainian Cyrillic (KOI8-U)\n|28591|  unicode.org  |ISO 8859-1 Latin 1 (Western European)\n|28592|  unicode.org  |ISO 8859-2 Latin 2 (Central European)\n|28593|  unicode.org  |ISO 8859-3 Latin 3\n|28594|  unicode.org  |ISO 8859-4 Baltic\n|28595|  unicode.org  |ISO 8859-5 Cyrillic\n|28596|  unicode.org  |ISO 8859-6 Arabic\n|28597|  unicode.org  |ISO 8859-7 Greek\n|28598|  unicode.org  |ISO 8859-8 Hebrew (ISO-Visual)\n|28599|  unicode.org  |ISO 8859-9 Turkish\n|28600|  unicode.org  |ISO 8859-10 Latin 6\n|28601|  unicode.org  |ISO 8859-11 Latin (Thai)\n|28603|  unicode.org  |ISO 8859-13 Latin 7 (Estonian)\n|28604|  unicode.org  |ISO 8859-14 Latin 8 (Celtic)\n|28605|  unicode.org  |ISO 8859-15 Latin 9\n|28606|  unicode.org  |ISO 8859-15 Latin 10\n|29001|MakeEncoding.cs|Europa 3\n|38598|MakeEncoding.cs|ISO 8859-8 Hebrew (ISO-Logical)\n|50220|MakeEncoding.cs|ISO 2022 JIS Japanese with no halfwidth Katakana\n|50221|MakeEncoding.cs|ISO 2022 JIS Japanese with halfwidth Katakana\n|50222|MakeEncoding.cs|ISO 2022 Japanese JIS X 0201-1989 (1 byte Kana-SO/SI)\n|50225|MakeEncoding.cs|ISO 2022 Korean\n|50227|MakeEncoding.cs|ISO 2022 Simplified Chinese\n|51932|MakeEncoding.cs|EUC Japanese\n|51936|MakeEncoding.cs|EUC Simplified Chinese\n|51949|MakeEncoding.cs|EUC Korean\n|52936|MakeEncoding.cs|HZ-GB2312 Simplified Chinese\n|54936|MakeEncoding.cs|GB18030 Simplified Chinese (4 byte)\n|57002|MakeEncoding.cs|ISCII Devanagari\n|57003|MakeEncoding.cs|ISCII Bengali\n|57004|MakeEncoding.cs|ISCII Tamil\n|57005|MakeEncoding.cs|ISCII Telugu\n|57006|MakeEncoding.cs|ISCII Assamese\n|57007|MakeEncoding.cs|ISCII Oriya\n|57008|MakeEncoding.cs|ISCII Kannada\n|57009|MakeEncoding.cs|ISCII Malayalam\n|57010|MakeEncoding.cs|ISCII Gujarati\n|57011|MakeEncoding.cs|ISCII Punjabi\n|65000|     magic     |Unicode (UTF-7)\n|65001|     magic     |Unicode (UTF-8)\n\nNote that MakeEncoding.cs deviates from unicode.org for some codepages.  In the\ncase of direct conflicts, unicode.org takes precedence.  In cases where the\nunicode.org listing does not prescribe a value, MakeEncoding.cs value is used.\n\nNLS refers to the National Language Support files supplied in various versions of\nWindows.  In older versions of Windows (e.g. Windows 98) these files followed the\npattern `CP_#.NLS`, but newer versions use the pattern `C_#.NLS`.\n\n## Sources\n\n- [Unicode Consortium Public Mappings](http://www.unicode.org/Public/MAPPINGS/)\n- [Code Page Enumeration](http://msdn.microsoft.com/en-us/library/cc195051.aspx)\n- [Code Page Identifiers](http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756.aspx)\n\n## Badges\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/afa29a5e8495a01059ee5b353f9042cb \"githalytics.com\")](http://githalytics.com/SheetJS/js-codepage)\n[![Build Status](https://travis-ci.org/SheetJS/js-codepage.svg?branch=master)](https://travis-ci.org/SheetJS/js-codepage)\n[![Coverage Status](https://coveralls.io/repos/SheetJS/js-codepage/badge.png)](https://coveralls.io/r/SheetJS/js-codepage)\n",
  "readmeFilename": "README.md",
  "_id": "codepage@1.3.8",
  "_from": "codepage@~1.3.6"
}
