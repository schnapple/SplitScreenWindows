{
  "name": "crc-32",
  "version": "0.3.0",
  "author": {
    "name": "sheetjs"
  },
  "description": "Pure-JS CRC-32",
  "keywords": [
    "crc32",
    "checksum",
    "crc"
  ],
  "main": "./crc32",
  "devDependencies": {
    "mocha": "",
    "uglify-js": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-crc32.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test"
  },
  "config": {
    "blanket": {
      "pattern": "crc32.js"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-crc32/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# crc32\n\nStandard CRC-32 algorithm implementation in JS (for the browser and nodejs).\nEmphasis on correctness and performance.\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/crc-32):\n\n    $ npm install crc-32\n\nIn the browser:\n\n    <script src=\"crc32.js\"></script>\n\nThe script will manipulate `module.exports` if available (e.g. in a CommonJS\n`require` context).  This is not always desirable.  To prevent the behavior,\ndefine `DO_NOT_EXPORT_CRC`\n\n## Usage\n\nIn all cases, the relevant function takes a single argument representing data.\n\nThe return value is a signed 32-bit integer.\n\n- `CRC32.buf(byte array or buffer)` assumes the argument is a set of 8-bit\n  unsigned integers (e.g. nodejs `Buffer` or simple array of ints).\n\n- `CRC32.bstr(binary string)` interprets the argument as a binary string where\n  the `i`-th byte is the low byte of the UCS-2 char: `str.charCodeAt(i) & 0xFF`\n\n- `CRC32.str(string)` interprets the argument as a standard JS string\n\nFor example:\n\n```js\n> // var CRC32 = require('crc-32'); // uncomment this line if in node\n> CRC32.str(\"SheetJS\")                          // -1647298270\n> CRC32.bstr(\"SheetJS\")                         // -1647298270\n> CRC32.buf([ 83, 104, 101, 101, 116, 74, 83 ]) // -1647298270\n\n> [CRC32.str(\"\\u2603\"),  CRC32.str(\"\\u0003\")]   // [ -1743909036,  1259060791 ]\n> [CRC32.bstr(\"\\u2603\"), CRC32.bstr(\"\\u0003\")]  // [  1259060791,  1259060791 ]\n> [CRC32.buf([0x2603]),  CRC32.buf([0x0003])]   // [  1259060791,  1259060791 ]\n```\n\n## Testing\n\n`make test` will run the node-based tests.\n\nTo run the in-browser tests, run a local server and go to the `ctest` directory.\nTo update the browser artifacts, run `make ctest`.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n## Badges\n\n[![Build Status](https://travis-ci.org/SheetJS/js-crc32.svg?branch=master)](https://travis-ci.org/SheetJS/js-crc32)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-crc32/master.svg)](https://coveralls.io/r/SheetJS/js-crc32?branch=master)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/js-crc32?pixel)](https://github.com/SheetJS/js-crc32)\n",
  "readmeFilename": "README.md",
  "_id": "crc-32@0.3.0",
  "_from": "crc-32@"
}
