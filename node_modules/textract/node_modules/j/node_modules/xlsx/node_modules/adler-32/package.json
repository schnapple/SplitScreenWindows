{
  "name": "adler-32",
  "version": "0.2.1",
  "author": {
    "name": "sheetjs"
  },
  "description": "Pure-JS ADLER-32",
  "keywords": [
    "adler32",
    "checksum"
  ],
  "main": "./adler32",
  "devDependencies": {
    "mocha": "",
    "xlsjs": "",
    "uglify-js": "",
    "codepage": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-adler32.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test"
  },
  "config": {
    "blanket": {
      "pattern": "adler32.js"
    }
  },
  "files": [
    "adler32.js",
    "LICENSE",
    "README.md"
  ],
  "bugs": {
    "url": "https://github.com/SheetJS/js-adler32/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# adler32\n\nSigned ADLER-32 algorithm implementation in JS (for the browser and nodejs).\nEmphasis on correctness and performance.\n\n## Installation\n\nIn [nodejs](https://www.npmjs.org/package/adler-32):\n\n    npm install adler-32\n\nIn the browser:\n\n    <script lang=\"javascript\" src=\"adler32.js\"></script>\n\nThe browser exposes a variable ADLER32\n\n## Usage\n\n- `ADLER32.buf(byte array or buffer)` assumes the argument is a set of 8 bit\n  unsigned integers (e.g. nodejs `Buffer` or simple array of ints)\n\n- `ADLER32.bstr(binary string)` interprets the argument as a binary string where\n  the `i`-th byte is `str.charCodeAt(i)`\n\n- `ADLER32.str(string)` interprets the argument as a standard JS string\n\n## Testing\n\n`make test` will run the nodejs-based test.  To run the in-browser tests, run a\nlocal server and go to the `ctest` directory.  To update the browser artifacts,\nrun `make ctest`.\n\nTo generate the bits file, use the `adler32` function from python zlib:\n\n```\n>>> from zlib import adler32\n>>> x=\"foo bar baz٪☃🍣\"\n>>> adler32(x)\n1543572022\n>>> adler32(x+x)\n-2076896149\n>>> adler32(x+x+x)\n2023497376\n```\n\n## Performance\n\n`make perf` will run algorithmic performance tests (which should justify certain\ndecisions in the code).  \n\n[js-crc](http://git.io/crc32) has more performance notes\n\nBit twiddling is much faster than taking the mod on Safari and older Firefoxes.\nInstead of taking the literal mod 65521, it is faster to keep it in the integers\nby bit-shifting: `65536 ~ 15 mod 65521` so for nonnegative integer `a`:\n\n```\n    a = (a >>> 16) * 65536 + (a & 65535)            [equality]\n    a ~ (a >>> 16) * 15    + (a & 65535) mod 65521\n```\n\nThe mod is taken at the very end, since the intermediate result may exceed 65521\n\n## Magic Number\n\nThe magic numbers were chosen so as to not overflow a 31-bit integer:\n\n```\nF[n_] := Reduce[x*(x + 1)*n/2 + (x + 1)*(65521) < (2^31 - 1) && x > 0, x, Integers]\nF[255] (* bstr:  x \\[Element] Integers && 1 <= x <= 3854 *)\nF[127] (* ascii: x \\[Element] Integers && 1 <= x <= 5321 *)\n```\n\nSubtract up to 4 elements for the unicode case.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n[![Build Status](https://travis-ci.org/SheetJS/js-adler32.svg?branch=master)](https://travis-ci.org/SheetJS/js-adler32)\n\n[![Coverage Status](https://coveralls.io/repos/SheetJS/js-adler32/badge.png?branch=master)](https://coveralls.io/r/SheetJS/js-adler32?branch=master)\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/8827aa40b3fdbca7c7ad0f51c68b3379 \"githalytics.com\")](http://githalytics.com/SheetJS/js-adler32)\n\n",
  "readmeFilename": "README.md",
  "_id": "adler-32@0.2.1",
  "_from": "adler-32@"
}
